---
import BaseHtml from "@/layout/base-html.astro"
import { parse } from "node:path"
import {
  isCallout,
  isHeading2,
  isHeading3,
  isJaToggle,
  isParagraph,
  isQuote,
  isToggle,
  isTable
} from "@/lib/notion/validate-block"
import Paragraph from "@/components/notion/paragraph.svelte"
import Heading2 from "@/components/notion/heading2.svelte"
import TogglePhrase from "@/components/notion/toggle-phrase.svelte"
import Quote from "@/components/notion/quote.svelte"
import Heading3 from "@/components/notion/heading3.svelte"
import Table from "@/components/notion/table.svelte"
import CalloutPhrase from "@/components/notion/callout-phrase.svelte"
import JaToggle from "@/components/notion/ja-toggle.svelte"

const toSlug = (path: string) => {
  const { dir, name } = parse(path)
  const slug = dir
    .split("/")
    .filter((sep) => sep.length > 0 && sep !== "data")
    .concat(name)
    .join("/")
  return slug
}

const pager = (entries: [string, () => Promise<unknown>][], currIdx: number) => {
  const prevEntry = entries[currIdx - 1]
  const nextEntry = entries[currIdx + 1]

  const prevPath = prevEntry ? prevEntry[0] : null
  const nextPath = nextEntry ? nextEntry[0] : null

  const prev = prevPath ? toSlug(prevPath) : null
  const next = nextPath ? toSlug(nextPath) : null

  return { prev, next }
}

export async function getStaticPaths() {
  const modules = import.meta.glob("/data/**/*.json")
  const entries = Object.entries(modules)

  const pages = await Promise.all(
    entries.map(async ([path, importFn], i) => {
      const module = await importFn()

      const curr = toSlug(path)
      const { prev, next } = pager(entries, i)

      const props = { slug: curr, prev, next }
      return {
        params: { slug: curr },
        props: typeof module === "object" ? { ...module, ...props } : props
      }
    })
  )

  return pages
}

interface Props {
  slug: string
  prev: string | null
  next: string | null
  title: string
  id: string
  blocks: Record<string, unknown>[]
}

const { slug, prev, next, blocks } = Astro.props
---

<BaseHtml>
  <h1>{slug}</h1>
  <div class="blocks">
    {
      blocks.map((block) => {
        if (isCallout(block)) {
          return <CalloutPhrase content={block.callout} client:visible />
        } else if (isJaToggle(block)) {
          return <JaToggle content={block.toggle.children} />
        } else if (isParagraph(block)) {
          return <Paragraph content={block.paragraph} />
        } else if (isHeading2(block)) {
          return <Heading2 content={block.heading_2} />
        } else if (isToggle(block)) {
          return <TogglePhrase content={block.toggle} client:visible />
        } else if (isQuote(block)) {
          return <Quote content={block.quote} />
        } else if (isHeading3(block)) {
          return <Heading3 content={block.heading_3} />
        } else if (isTable(block)) {
          return <Table content={block.table} client:visible />
        }
      })
    }
  </div>
</BaseHtml>

<style>
  .blocks {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  h1 {
    text-align: center;
    font-size: 2.5rem;
    margin: 0;
  }
</style>
